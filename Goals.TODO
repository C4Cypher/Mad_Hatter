Design Goals:
* Purely declarative
* Unordered clauses
* Allow binding of free variables
* Refinement+Dependent type system
* Multiple compilation models with  





Outline
Current goals
get a repl running
		get parsing working
			Define TOP level constructs 
				definitions for module, program and ... 'library'? 
					method dispatch for top level atoms
				finish mh_term
					implement unification
						define environments/symbol substitution
							finish substitutions 
								term constraints 	
						hash out higher order types 
							define clauses
								scope <- I am here
								term constraints			
								mode system
									implement inst trees?
 
compile to native at runtime
	
	

Constraints

	
			
Higher order constructs:
	* A relation takes a substitution as input and returns a substitution
	* A predicate takes a term as input and returns a substitution
	* A function takes a term as input and returns a term
					
HO Notes:

I just realized I can implement constraint solving (and thus types) by making
'constraint terms' ... 

Id' have to re-think the rules to unification.
* A free variable unified with a constraint binds the variable to the constraint the same as if bound to a ground value.
* A constraint unifies with another constraint to produce a new constraint, and may result in constraint propogation, resulting in more unifications
* A constraint unifying with a ground value either fails if the constraint is not met, or results in a binding to said ground value if it succeeds

And I suspect I can use relations as the mechanism for defining constraints

I've been struggling to define relations in anything but a general sense, 
I know they're something of a superclass to both predicates and functions,
Depending on the mode, i.e. information flow of the arguments and return value

A function is a relation with all input arguments and unifies with an output 

A predicate accepts substitutions and returns new substitutions 
and with constraints may *replace* substitutions

A predicate can also, under the right modes, be reduced to a function, either
of the form pred(in, in, in, out) => func(in, in, in) -> out OR 
pred(args) => func(substitutions) -> substitutions

Loose ideas:
Relations can resolve to predicates or functions
Relations propogate constraints if they can't resolve to a higher order call?
Constraints == types?
Constraints ARE higher order constructts?

