Design Goals:
* Purely declarative
* Unordered clauses
* Allow binding of free variables
* Refinement+Dependent type system
* 'true' first-class constraints and procedures 
* Multiple compilation models   





Outline
Current goals
get a repl running
		get parsing working !! Term parsing working! need to flesh out
			convert mr_terms to mr_primitives
			Define TOP level constructs 
				definitions for module, done*  basic structure finished
					method dispatch for top level atoms, done, mh_environment
				declarations
					pragmas
					promises
					fact assertions
					mercury types
				finish mh_term, my high level AST
					refactor substitutions
						implement term sets  <- I am here
							refactor tuples
								internalize representation
									implement set tuples
										hash table?
									cache mr->list->array->set->list conversion
					define environments/symbol substitution
						finish substitutions 
							term constraints 	
					hash out higher order types 
						relations
							propositional language
								implement unification
									redesign tuples lazily
									refactor substitutions
						define clauses
							scope
							term constraints			
							mode system
								implement inst trees?
 
compile to native at runtime
	
	


			
Higher order constructs:
	* A relation is unification with a disjunction of higher order terms
	% A predicate represents a truth value
	% A function represents a one way transformation from one term to another
	% A constraint represents a non-ground value a term can unify with
	
HO Notes:

I just realized I can implement constraint solving (and thus types) by making
'constraint terms' ... 

Id' have to re-think the rules to unification in relation to constraints.
* A free variable unified with a constraint binds the variable to the constraint the same as if bound to a ground value.
* A constraint unifies with another constraint to produce a new constraint, and may result in constraint propogation, resulting in more unifications
* A constraint unifying with a ground value either fails if the constraint is not met, or results in a binding to said ground value if it succeeds

And I suspect I can use relations as the mechanism for defining constraints

I've been struggling to define relations in anything but a general sense, 
I know they're something of a superclass to both predicates and functions,
Depending on the mode, i.e. information flow of the arguments and return value

A function is a relation with all input arguments and unifies with an output 

A predicate accepts substitutions and returns new substitutions 
and with constraints may *replace* substitutions

A predicate can also, under the right modes, be reduced to a function, either
of the form pred(in, in, in, out) => func(in, in, in) -> out OR 
pred(args) => func(substitutions) -> substitutions

Loose ideas:
Relations can resolve to predicates or functions (or constraints)
Relations propogate constraints if they can't resolve to a higher order call?
Rleations represent a disjunction of higher order calls based on input.
Constraints == types? No, types are a *kind* of constraint.
Constraints ARE higher order constructts?

