Design Goals:
* Purely declarative
* Unordered clauses
* Allow binding of free variables
* Refinement+Dependent type system
* 'true' first-class constraints and procedures
* Decompile into Mad Hatter readable and editable Mad Hatter sourcee 
* Multiple compilation models   
	- Multiple Language models
	- Compile foreign source/headers into importable Mad Hatter Libraries
	- Compile to bytecode, either for efficient interpretation or JIT
	- Compile to foreign source code
	- Compile foreign source code into Mad Hatter as high level IR
	- Decompile bytecode into Mad Hatter for verification
* Optional: Make Mad Hatter a superset of Mercury, allowing for direct parsing
* Implement Mad Hatter in C, allowing for independence from Mercury runtime


Read up on Huet's algorithm
Read up on Knuthâ€“Bendix completion algorithm

Outline
Current goals
get a repl running
		get parsing working !! Term parsing working! need to flesh out
			convert mr_terms to mr_primitives
			Define TOP level constructs 
				definitions for module -  basic structure finished
					method dispatch for top level atoms, done, mh_environment
					finish mh_environment design - see below
				declarations
					pragmas
					promises
					fact assertions
					mercury types
				finish mh_term, my high level AST
					Implement core term functionality  <- I am here
						Subterms
						Groundedness
						Substitutions
						Unification
					finish higher order types 
						relations
							scope
							environment transition
							ordered proposition sets
								proposition maps 
							ordered relation sets
								relation maps
							functions
								representation for foreign calls
							mode system
					ordered term sets
						finish term map	 - on hold
							proposition map
							relation map
							function map
							mode map
							substitution map
					refactor substitutions
					refactor tuples
					partial set evaluation/iterators? 
				evaluation
					environment 
						finish substitutions 
							term constraints 	
						A mapping of symbols to relations 
							(modules are envorionments)
						basic interface for map structure
							bind, bound 
							a table of evaluations, serves as a truth table and
							memo table for evaluation state
						event
							rework context - done
							warning
							error
							custom
						ground check
						groundedness
							evaluate a numeric 'groundedness' based on free
							variables and groundedness of sub components
						redesign tuples
							partial evaluation of tuples (CPS?)
							array tuple sub ranges
							native lists ( cons('[|]', ?list) )
					eval table
						memo table for evaluations
						segregated by calling environment
					unification
					
					an evaluation may not produce a value that is less ground
						than the input, out = In >> Out, In =< Out
			Incorporate mh_scope into mr_term conversion
				Add mr_varset handling in term conversion
			Mad Hatter ops table - add lazy operator - done
			
destructive updates for map types (optimization) 
	- not possible using normal unique modes, mh_var_maps contain arrays which
		utilize ad-hoc destructive updates instead of unique modes
normalize value terms - done for now, everything is a mercury value for now
make a logo for Mad Hatter
optimize terms
	re-order mh_term constructors for optimal ordering
	re-write mh_term into a C foreign type that can be efficiently serialized
		and represented in a bytecode form without impacting it's function
optimize symbols
	hash table for symbol pointers - done
	ensure symbols are thread safe - ??? - long term
module library system
	namespace resolution
organize a folder space for multiple front ends in different languages?
modular framework for back_ends
compile to native at runtime
bootstrap Mad Hatter (implement Mad Hatter in Mad Hatter)
compile bootstrapped Mad Hatter into C
ensure that Mad Hatter can be a fully backwards compatable Mercury compiler
	
	


			
Higher order constructs:
	* A relation is unification with a disjunction of higher order terms
	* A proposition represents a truth value
		- As such, it can be represented as a function that returns a truth val
	% A function represents a one way transformation from one term to another
	% A constraint represents a non-ground value a term can unify with
	
HO Notes:

I just realized I can implement constraint solving (and thus types) by making
'constraint terms' ... 

Id' have to re-think the rules to unification in relation to constraints.
* A free variable unified with a constraint binds the variable to the constraint the same as if bound to a ground value.
* A constraint unifies with another constraint to produce a new constraint, and may result in constraint propogation, resulting in more unifications
	- If two constraints unify (do not contradict), then the resulting bound
	- value is a conjunction of the constraints.
* A constraint unifying with a ground value either fails if the constraint is
	not met, or results in a binding to a CONJUNCTION of the ground value and
	the constraint. No need to re test a ground value on a constraint if we
	know that it has already been tested, thus memoization of constraint
	evaluations can be inherent in the structure.

And I suspect I can use relations as the mechanism for defining constraints

/* OLD
I've been struggling to define relations in anything but a general sense, 
I know they're something of a superclass to both predicates and functions,
Depending on the mode, i.e. information flow of the arguments and return value
*/

A relation represents a unification rule beyond a simple equality test.
This definition alows relations to encompass just about all higher order lambda
concepts.  Unifying them is going to be a bitch, as the problem is undecidable
however I know I can implement a decidable sub set of Huet's algo ... or at 
the very least ... have the compiler tell the programmer that if it is working
too hard to unify two terms.  It is on the programmer to place constraints
on undecidable problems to make them decidable ... and on the compiler to
inform the programmer when those constraints are needed.

A function is a relation with all input arguments and unifies with an output 

A predicate accepts substitutions and returns new substitutions 
and with constraints may *replace* substitutions

A predicate can also, under the right modes, be reduced to a function, either
of the form pred(in, in, in, out) => func(in, in, in) -> out OR 
pred(args) => func(substitutions) -> substitutions

Loose ideas:
Relations can resolve to predicates or functions (or constraints)
Relations propogate constraints if they can't resolve to a higher order call?
Rleations represent a disjunction of higher order calls based on input.
Constraints == types? No, types are a *kind* of constraint.
Constraints ARE higher order constructs.
Constraints are a delayed evaluation of a unification with a variable in a 
higher order formula, basically X = ?foo states that X is bound to any value 
where foo(X) is true or X = foo is true.

