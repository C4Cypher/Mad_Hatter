Design Goals:
* Purely declarative
* Unordered clauses
* Allow binding of free variables
* Refinement+Dependent type system
* 'true' first-class constraints and procedures
* Decompile into Mad Hatter readable and editable Mad Hatter sourcee 
* Multiple compilation models   
	- Multiple Language models
	- Compile foreign source/headers into importable Mad Hatter Libraries
	- Compile to bytecode, either for efficient interpretation or JIT
	- Compile to foreign source code
	- Compile foreign source code into Mad Hatter as high level IR
	- Decompile bytecode into Mad Hatter for verification
* Optional: Make Mad Hatter a superset of Mercury, allowing for direct parsing
* Implement Mad Hatter in C, allowing for independence from Mercury runtime




Outline
Current goals
get a repl running
		get parsing working !! Term parsing working! need to flesh out
			convert mr_terms to mr_primitives
			Define TOP level constructs 
				definitions for module, done*  basic structure finished
					method dispatch for top level atoms, done, mh_environment
				declarations
					pragmas
					promises
					fact assertions
					mercury types
				finish mh_term, my high level AST
					refactor tuples, done
					refactor substitutions
					hash out higher order types (see below)
						implement term sets
							implement term map
								implement predicate maps
									finish predicate definition <- in progress
								implement relation maps
								function maps?
					define environments/symbol substitution
						finish substitutions 
							term constraints 	
					hash out higher order types 
						predicates
							represent clause bodies, truth values
							propositional language
							conj and disj rep by ordered sets
								implement ordered sets - done
						relations 
							represent equivalences and clauses
							work out internal representation 
								unify relations
								clauses
									modes
										pre-conditions
										post-conditions/promises?
								single mode of a relation = clause + mode?
							define clauses in terms of relations
							scope
							term constraints			
							mode system
								implement inst trees?
							representation for foreign calls
								integrate into mode system
				evaluation
					environment <- I am here
						a table of evaluations, serves as a truth table and
						memo table
					ground check
					groundedness
						evaluate a numeric 'groundedness' based on free
						variables and groundedness of sub components
					an evaluation may not produce a value that is less ground
						than the input
					unification  
							redesign tuples lazily
							refactor substitutions
make a logo for Mad Hatter
optimize terms
	re-order mh_term constructors for optimal ordering
	re-write mh_term into a C foreign type that can be efficiently serialized
		and represented in a bytecode form without impacting it's function
optimize symbols
	hash table for symbol pointers? HAMT? GC safe?
	ensurre symbols are thread safe 
module library system
	namespace resolution
organize a folder space for multiple front ends in different languages?
modular framework for back_ends
compile to native at runtime
bootstrap Mad Hatter (implement Mad Hatter in Mad Hatter)
ensure that Mad Hatter can be a fully backwards compatable Mercury compiler
	
	


			
Higher order constructs:
	* A relation is unification with a disjunction of higher order terms
	% A predicate represents a truth value
	% A function represents a one way transformation from one term to another
	% A constraint represents a non-ground value a term can unify with
	
HO Notes:

I just realized I can implement constraint solving (and thus types) by making
'constraint terms' ... 

Id' have to re-think the rules to unification in relation to constraints.
* A free variable unified with a constraint binds the variable to the constraint the same as if bound to a ground value.
* A constraint unifies with another constraint to produce a new constraint, and may result in constraint propogation, resulting in more unifications
* A constraint unifying with a ground value either fails if the constraint is not met, or results in a binding to said ground value if it succeeds

And I suspect I can use relations as the mechanism for defining constraints

I've been struggling to define relations in anything but a general sense, 
I know they're something of a superclass to both predicates and functions,
Depending on the mode, i.e. information flow of the arguments and return value

A function is a relation with all input arguments and unifies with an output 

A predicate accepts substitutions and returns new substitutions 
and with constraints may *replace* substitutions

A predicate can also, under the right modes, be reduced to a function, either
of the form pred(in, in, in, out) => func(in, in, in) -> out OR 
pred(args) => func(substitutions) -> substitutions

Loose ideas:
Relations can resolve to predicates or functions (or constraints)
Relations propogate constraints if they can't resolve to a higher order call?
Rleations represent a disjunction of higher order calls based on input.
Constraints == types? No, types are a *kind* of constraint.
Constraints ARE higher order constructs.

